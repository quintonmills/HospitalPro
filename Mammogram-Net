{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n!pip install Livelossplot\nfrom livelossplot import PlotLossesKeras\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-05-08T06:22:21.704766Z","iopub.execute_input":"2023-05-08T06:22:21.705733Z","iopub.status.idle":"2023-05-08T06:22:34.245961Z","shell.execute_reply.started":"2023-05-08T06:22:21.705689Z","shell.execute_reply":"2023-05-08T06:22:34.244891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n# Validation Strategy:\n\n## Train Data Size= 0.7*Total_Data\n## Validation Data Size= 0.21* Total_Data\n## Test Data Size= 0.09 * Total_Data\n\n# Augmentaions Used:\n## Each Image is rotated through 45 angles\n","metadata":{}},{"cell_type":"code","source":"\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom PIL import Image\nimport scipy\n\nimport tensorflow as tf\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.losses import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras.utils import *\n# import pydot\n\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import *\nimport tensorflow.keras.backend as K\n\nfrom tqdm import tqdm, tqdm_notebook\nfrom colorama import Fore\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom glob import glob\nfrom skimage.io import *\n%config Completer.use_jedi = False\nimport time\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nimport lightgbm as lgb\nimport xgboost as xgb\n\nprint(\"All modules have been imported\")","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:34.248515Z","iopub.execute_input":"2023-05-08T06:22:34.248887Z","iopub.status.idle":"2023-05-08T06:22:43.261236Z","shell.execute_reply.started":"2023-05-08T06:22:34.248849Z","shell.execute_reply":"2023-05-08T06:22:43.260325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"info=pd.read_csv(\"../input/mias-mammography/Info.txt\",sep=\" \")\ninfo=info.drop('Unnamed: 7',axis=1)\ninfo.SEVERITY.fillna(0)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:43.262437Z","iopub.execute_input":"2023-05-08T06:22:43.262769Z","iopub.status.idle":"2023-05-08T06:22:43.292837Z","shell.execute_reply.started":"2023-05-08T06:22:43.262737Z","shell.execute_reply":"2023-05-08T06:22:43.291815Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.set_style('darkgrid')\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot(x=info.BG.unique(),y=info.BG.value_counts(),palette='Blues_r',ax=ax1)\nsns.barplot(x=info.CLASS.unique(),y=info.CLASS.value_counts(),palette='Blues_r',ax=ax2)\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:43.295612Z","iopub.execute_input":"2023-05-08T06:22:43.295963Z","iopub.status.idle":"2023-05-08T06:22:43.719493Z","shell.execute_reply.started":"2023-05-08T06:22:43.295933Z","shell.execute_reply":"2023-05-08T06:22:43.718569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from PIL import Image\nimport glob\nx= []\nfor filename in sorted(glob.glob(\"../input/mias-mammography/all-mias/*.pgm\")): \n    img=cv2.imread(filename)\n    img =cv2.resize(img,(224, 224))\n    x.append(img)\nfig=plt.figure(figsize=(15,15))\ncolumns = 3\nrows = 3\nfor i in range(1, columns*rows +1):\n    img = np.random.randint(10)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(x[i])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:43.720925Z","iopub.execute_input":"2023-05-08T06:22:43.721518Z","iopub.status.idle":"2023-05-08T06:22:52.765044Z","shell.execute_reply.started":"2023-05-08T06:22:43.721483Z","shell.execute_reply":"2023-05-08T06:22:52.764256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Image Augmentation\nno_angles = 360\nurl = '/kaggle/input/mias-mammography/all-mias/'\n\ndef save_dictionary(path,data):\n        print('saving catalog...')\n        #open('u.item', encoding=\"utf-8\")\n        import json\n        with open(path,'w') as outfile:\n            json.dump(str(data), fp=outfile)\n        # save to file:\n        print(' catalog saved')","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:52.765966Z","iopub.execute_input":"2023-05-08T06:22:52.76627Z","iopub.status.idle":"2023-05-08T06:22:52.772618Z","shell.execute_reply.started":"2023-05-08T06:22:52.766243Z","shell.execute_reply":"2023-05-08T06:22:52.771441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# train_test_split_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\n# val_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\n# test_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\ndef read_image():\n        print(\"Reading images\")\n        import cv2\n        info = {}\n        for i in range(322):\n            if i<9:\n                image_name='mdb00'+str(i+1)\n            elif i<99:\n                image_name='mdb0'+str(i+1)\n            else:\n                image_name = 'mdb' + str(i+1)\n            image_address= url+image_name+'.pgm'\n            img = cv2.imread(image_address,1)\n            img = cv2.resize(img, (224,224))\n            rows, cols,channel = img.shape\n            info[image_name]={}\n            for angle in range(0,no_angles,8):\n                M = cv2.getRotationMatrix2D((cols / 2, rows / 2), angle, 1) \n                img_rotated = cv2.warpAffine(img, M, (cols, rows))\n                info[image_name][angle]=img_rotated\n        return (info)\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:52.774271Z","iopub.execute_input":"2023-05-08T06:22:52.774681Z","iopub.status.idle":"2023-05-08T06:22:52.786812Z","shell.execute_reply.started":"2023-05-08T06:22:52.774653Z","shell.execute_reply":"2023-05-08T06:22:52.785739Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def read_lable():\n    print(\"Reading labels\")\n    filename = url+'Info.txt'\n    text_all = open(filename).read()\n    #print(text_all)\n    lines=text_all.split('\\n')\n    info={}\n    for line in lines:\n        words=line.split(' ')       \n        if len(words)>3:\n            if (words[3] == 'B'):\n                info[words[0]] = {}\n                for angle in range(0,no_angles,8):\n                    info[words[0]][angle] = 0\n            if (words[3] == 'M'):\n                info[words[0]] = {}\n                for  angle in range(0,no_angles,8):\n                    info[words[0]][angle] = 1\n    return (info)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:52.788477Z","iopub.execute_input":"2023-05-08T06:22:52.788798Z","iopub.status.idle":"2023-05-08T06:22:52.796988Z","shell.execute_reply.started":"2023-05-08T06:22:52.788771Z","shell.execute_reply":"2023-05-08T06:22:52.796116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nlable_info=read_lable()\nimage_info=read_image()\nids=lable_info.keys() \ndel lable_info['Truth-Data:']\nX=[]\nY=[]\nfor id in ids:\n    for angle in range(0,no_angles,8):\n        X.append(image_info[id][angle])\n        Y.append(lable_info[id][angle])\nX=np.array(X)\nY=np.array(Y)\nY=to_categorical(Y,2)\nx_train, x_test1, y_train, y_test1 = train_test_split(X, Y, test_size=0.3, random_state=42)\nx_val, x_test, y_val, y_test = train_test_split(x_test1, y_test1, test_size=0.3, random_state=42)\nprint(len(x_train),len(x_val),len(x_test))","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:22:52.799752Z","iopub.execute_input":"2023-05-08T06:22:52.799991Z","iopub.status.idle":"2023-05-08T06:23:00.948811Z","shell.execute_reply.started":"2023-05-08T06:22:52.799971Z","shell.execute_reply":"2023-05-08T06:23:00.947882Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Callbacks\nc2=tf.keras.callbacks.EarlyStopping(\n    monitor=\"val_loss\",\n    min_delta=0,\n    patience=6,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=True,\n)\n\nc3=tf.keras.callbacks.ReduceLROnPlateau(\n    monitor=\"val_loss\",\n    factor=0.1,\n    patience=6,\n    mode=\"auto\",\n    min_delta=0.0001,\n    cooldown=0,\n    min_lr=0.001\n)\nnClasses=3","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:23:00.952736Z","iopub.execute_input":"2023-05-08T06:23:00.95301Z","iopub.status.idle":"2023-05-08T06:23:00.958722Z","shell.execute_reply.started":"2023-05-08T06:23:00.952987Z","shell.execute_reply":"2023-05-08T06:23:00.957484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# InceptionResNetV2","metadata":{}},{"cell_type":"code","source":"base_Neural_Net= InceptionResNetV2(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:23:00.960305Z","iopub.execute_input":"2023-05-08T06:23:00.960876Z","iopub.status.idle":"2023-05-08T06:23:20.888859Z","shell.execute_reply.started":"2023-05-08T06:23:00.960844Z","shell.execute_reply":"2023-05-08T06:23:20.88796Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:23:20.890077Z","iopub.execute_input":"2023-05-08T06:23:20.89043Z","iopub.status.idle":"2023-05-08T06:26:26.896204Z","shell.execute_reply.started":"2023-05-08T06:23:20.890401Z","shell.execute_reply":"2023-05-08T06:26:26.895191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:26:26.898069Z","iopub.execute_input":"2023-05-08T06:26:26.898756Z","iopub.status.idle":"2023-05-08T06:26:36.088106Z","shell.execute_reply.started":"2023-05-08T06:26:26.898716Z","shell.execute_reply":"2023-05-08T06:26:36.087083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred6=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred6=np.argmax(predict_y,axis=1)\n\ny_test6=[np.argmax(x) for x in y_test]\n\n#y_pred_prb6=model.predict_proba(x_test)\ndef predict_prob(number):\n  return [number[0],1-number[0]]\ny_pred_prb6 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test6, y_pred6),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test6, y_pred6, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test6,y_pred6, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test6, y_pred6, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test6, y_pred6,multi_class='ovo', average='weighted'),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test6, y_pred6,target_names=target))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test6, y_pred6),4))","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:33:27.008049Z","iopub.execute_input":"2023-05-08T06:33:27.008804Z","iopub.status.idle":"2023-05-08T06:33:32.523699Z","shell.execute_reply.started":"2023-05-08T06:33:27.008764Z","shell.execute_reply":"2023-05-08T06:33:32.522716Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Inception_V3","metadata":{}},{"cell_type":"code","source":"base_Neural_Net= InceptionV3(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:34:55.03056Z","iopub.execute_input":"2023-05-08T06:34:55.031349Z","iopub.status.idle":"2023-05-08T06:35:03.314116Z","shell.execute_reply.started":"2023-05-08T06:34:55.031313Z","shell.execute_reply":"2023-05-08T06:35:03.313152Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:35:03.316107Z","iopub.execute_input":"2023-05-08T06:35:03.316467Z","iopub.status.idle":"2023-05-08T06:36:29.539365Z","shell.execute_reply.started":"2023-05-08T06:35:03.316438Z","shell.execute_reply":"2023-05-08T06:36:29.538452Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:29.541314Z","iopub.execute_input":"2023-05-08T06:36:29.541735Z","iopub.status.idle":"2023-05-08T06:36:33.858063Z","shell.execute_reply.started":"2023-05-08T06:36:29.541702Z","shell.execute_reply":"2023-05-08T06:36:33.857165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred7=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred7=np.argmax(predict_y,axis=1)\n\ny_test7=[np.argmax(x) for x in y_test]\n\n#y_pred_prb7=model.predict_proba(x_test)\ny_pred_prb7 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test7, y_pred7),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test7, y_pred7, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test7,y_pred7, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test7, y_pred7, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test7, y_pred7,multi_class='ovo', average='weighted'),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test7, y_pred7,target_names=target))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test7, y_pred7),4))","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.859362Z","iopub.execute_input":"2023-05-08T06:36:33.859716Z","iopub.status.idle":"2023-05-08T06:36:33.892834Z","shell.execute_reply.started":"2023-05-08T06:36:33.859684Z","shell.execute_reply":"2023-05-08T06:36:33.890106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# DenseNet169","metadata":{}},{"cell_type":"code","source":"base_Neural_Net=DenseNet169(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.893535Z","iopub.status.idle":"2023-05-08T06:36:33.893872Z","shell.execute_reply.started":"2023-05-08T06:36:33.893705Z","shell.execute_reply":"2023-05-08T06:36:33.89372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.895601Z","iopub.status.idle":"2023-05-08T06:36:33.896119Z","shell.execute_reply.started":"2023-05-08T06:36:33.895896Z","shell.execute_reply":"2023-05-08T06:36:33.895918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.897205Z","iopub.status.idle":"2023-05-08T06:36:33.897713Z","shell.execute_reply.started":"2023-05-08T06:36:33.897486Z","shell.execute_reply":"2023-05-08T06:36:33.897507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred10=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred10=np.argmax(predict_y,axis=1)\n\ny_test10=[np.argmax(x) for x in y_test]\n\n#y_pred_prb10=model.predict_proba(x_test)\ny_pred_prb10 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test10, y_pred10),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test10, y_pred10, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test10,y_pred10, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test10, y_pred10, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test10, y_pred10,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test10, y_pred10),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test10, y_pred10,target_names=target))\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.898977Z","iopub.status.idle":"2023-05-08T06:36:33.89988Z","shell.execute_reply.started":"2023-05-08T06:36:33.899644Z","shell.execute_reply":"2023-05-08T06:36:33.899667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# DesneNet121","metadata":{}},{"cell_type":"code","source":"base_Neural_Net=DenseNet121(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.90121Z","iopub.status.idle":"2023-05-08T06:36:33.901916Z","shell.execute_reply.started":"2023-05-08T06:36:33.901684Z","shell.execute_reply":"2023-05-08T06:36:33.901707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.903357Z","iopub.status.idle":"2023-05-08T06:36:33.904194Z","shell.execute_reply.started":"2023-05-08T06:36:33.903927Z","shell.execute_reply":"2023-05-08T06:36:33.903953Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.906224Z","iopub.status.idle":"2023-05-08T06:36:33.906666Z","shell.execute_reply.started":"2023-05-08T06:36:33.906449Z","shell.execute_reply":"2023-05-08T06:36:33.90647Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred11=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred11=np.argmax(predict_y,axis=1)\n\ny_test11=[np.argmax(x) for x in y_test]\n\n#y_pred_prb11=model.predict_proba(x_test)\ndef predict_prob(number):\n  return [number[0],1-number[0]]\ny_pred_prb11 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test11, y_pred11),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test11, y_pred11, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test11,y_pred11, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test11, y_pred11, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test11, y_pred11,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test11, y_pred11),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test11, y_pred11,target_names=target))\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.90825Z","iopub.status.idle":"2023-05-08T06:36:33.908785Z","shell.execute_reply.started":"2023-05-08T06:36:33.908557Z","shell.execute_reply":"2023-05-08T06:36:33.908578Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# MobileNetV2","metadata":{}},{"cell_type":"code","source":"base_Neural_Net=MobileNetV2(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.910303Z","iopub.status.idle":"2023-05-08T06:36:33.910734Z","shell.execute_reply.started":"2023-05-08T06:36:33.910513Z","shell.execute_reply":"2023-05-08T06:36:33.910534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.912032Z","iopub.status.idle":"2023-05-08T06:36:33.912783Z","shell.execute_reply.started":"2023-05-08T06:36:33.912548Z","shell.execute_reply":"2023-05-08T06:36:33.912571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.914757Z","iopub.status.idle":"2023-05-08T06:36:33.915802Z","shell.execute_reply.started":"2023-05-08T06:36:33.91555Z","shell.execute_reply":"2023-05-08T06:36:33.915573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred12=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred12=np.argmax(predict_y,axis=1)\n\ny_test12=[np.argmax(x) for x in y_test]\n\n#y_pred_prb12=model.predict_proba(x_test)\ny_pred_prb12 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test12, y_pred12),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test12, y_pred12, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test12,y_pred12, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test12, y_pred12, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test12, y_pred12,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test12, y_pred12),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test12, y_pred12,target_names=target))\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.916958Z","iopub.status.idle":"2023-05-08T06:36:33.917734Z","shell.execute_reply.started":"2023-05-08T06:36:33.917507Z","shell.execute_reply":"2023-05-08T06:36:33.917529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# VGG-16","metadata":{}},{"cell_type":"code","source":"base_Neural_Net=VGG16(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.919068Z","iopub.status.idle":"2023-05-08T06:36:33.920083Z","shell.execute_reply.started":"2023-05-08T06:36:33.919853Z","shell.execute_reply":"2023-05-08T06:36:33.919875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.921231Z","iopub.status.idle":"2023-05-08T06:36:33.922064Z","shell.execute_reply.started":"2023-05-08T06:36:33.921828Z","shell.execute_reply":"2023-05-08T06:36:33.92185Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.92344Z","iopub.status.idle":"2023-05-08T06:36:33.924599Z","shell.execute_reply.started":"2023-05-08T06:36:33.924365Z","shell.execute_reply":"2023-05-08T06:36:33.924387Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred13=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred13=np.argmax(predict_y,axis=1)\n\ny_test13=[np.argmax(x) for x in y_test]\n\n#y_pred_prb13=model.predict_proba(x_test)\ny_pred_prb13 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test13, y_pred13),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test13, y_pred13, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test13,y_pred13, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test13, y_pred13, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test13, y_pred13,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test13, y_pred13),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test13, y_pred13,target_names=target))\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.925765Z","iopub.status.idle":"2023-05-08T06:36:33.926764Z","shell.execute_reply.started":"2023-05-08T06:36:33.926535Z","shell.execute_reply":"2023-05-08T06:36:33.926556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ResNet101","metadata":{}},{"cell_type":"code","source":"base_Neural_Net=ResNet101(input_shape=(224,224,3), weights='imagenet', include_top=False)\nmodel=Sequential()\nmodel.add(base_Neural_Net)\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(256,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2,activation='softmax'))\n\nfor layer in base_Neural_Net.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.927971Z","iopub.status.idle":"2023-05-08T06:36:33.928904Z","shell.execute_reply.started":"2023-05-08T06:36:33.928619Z","shell.execute_reply":"2023-05-08T06:36:33.928641Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.93043Z","iopub.status.idle":"2023-05-08T06:36:33.930867Z","shell.execute_reply.started":"2023-05-08T06:36:33.930644Z","shell.execute_reply":"2023-05-08T06:36:33.930664Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2023-05-08T06:36:33.932279Z","iopub.status.idle":"2023-05-08T06:36:33.932942Z","shell.execute_reply.started":"2023-05-08T06:36:33.932705Z","shell.execute_reply":"2023-05-08T06:36:33.932728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Performance Report:\")\n\n#y_pred14=model.predict_classes(x_test)\npredict_y=model.predict(x_test) \ny_pred14=np.argmax(predict_y,axis=1)\n\ny_test14=[np.argmax(x) for x in y_test]\n\n#y_pred_prb14=model.predict_proba(x_test)\ny_pred_prb14 = np.array(list(map(predict_prob, model.predict(x_test))))\n\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test14, y_pred14),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test14, y_pred14, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test14,y_pred14, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test14, y_pred14, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test14, y_pred14,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test14, y_pred14),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test14, y_pred14,target_names=target))\n","metadata":{"execution":{"iopub.status.busy":"2023-05-08T07:42:15.881077Z","iopub.execute_input":"2023-05-08T07:42:15.882112Z","iopub.status.idle":"2023-05-08T07:42:19.820823Z","shell.execute_reply.started":"2023-05-08T07:42:15.882069Z","shell.execute_reply":"2023-05-08T07:42:19.819455Z"},"trusted":true},"execution_count":null,"outputs":[]}]}
